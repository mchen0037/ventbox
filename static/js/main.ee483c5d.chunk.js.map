{"version":3,"sources":["components/Post.jsx","components/refresh.jsx","components/InputBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Post","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","increaseStateNumber","bind","assertThisInitialized","onLike","id","react_default","a","createElement","Card","fluid","Content","align","Meta","content","polarity","Description","text","extra","Button","compact","onClick","className","likes","Component","Refresh","refresh","InputBox","state","value","handleChange","handleSubmit","event","setState","target","preventDefault","axios","post","BACKEND_SERVER","Form","TextArea","onChange","placeholder","App","data","callRefresh","postLiked","get","result","_this2","Grid","columns","centered","Row","Column","width","map","d","key","components_Post","components_InputBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAqCeA,cAjCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,oBAAsBP,EAAKO,oBAAoBC,KAAzBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFVA,qFAMjBG,KAAKJ,MAAMW,OAAOP,KAAKJ,MAAMY,qCAI7B,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,OAAK,GACTJ,EAAAC,EAAAC,cAACC,EAAA,EAAKE,QAAN,KACEL,EAAAC,EAAAC,cAAA,OAAKI,MAAM,SACTN,EAAAC,EAAAC,cAACC,EAAA,EAAKI,KAAN,CAAWC,QAASjB,KAAKJ,MAAMsB,YAEjCT,EAAAC,EAAAC,cAACC,EAAA,EAAKO,YAAN,CAAkBF,QAASjB,KAAKJ,MAAMwB,QAExCX,EAAAC,EAAAC,cAACC,EAAA,EAAKE,QAAN,CAAcO,OAAK,GACjBZ,EAAAC,EAAAC,cAAA,OAAKI,MAAM,SACTN,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQC,SAAO,EAACC,QAASxB,KAAKI,qBAC5BK,EAAAC,EAAAC,cAAA,KAAGc,UAAU,eACZzB,KAAKJ,MAAM8B,kBAxBTC,aCaJC,mLAXX,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQT,OAAK,EAACW,QAASxB,KAAKJ,MAAMiC,SAAlC,UAEEpB,EAAAC,EAAAC,cAAA,KAAGc,UAAU,0BANDE,uCC8CPG,cAzCb,SAAAA,EAAYlC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IACjBjC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KACDmC,MAAQ,CACXC,MAAO,IAETnC,EAAKoC,aAAepC,EAAKoC,aAAa5B,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACpBA,EAAKqC,aAAerC,EAAKqC,aAAa7B,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KANHA,4EASNsC,GACXnC,KAAKoC,SAAS,CAAEJ,MAAOG,EAAME,OAAOL,qFAGnBG,sEACjBA,EAAMG,iBAEmB,KAArBtC,KAAK+B,MAAMC,uEAITO,IAAMC,KAAKC,6CAA0B,CAAErB,KAAMpB,KAAK+B,MAAMC,sBAC9DhC,KAAKJ,MAAMiC,mBACL7B,KAAKoC,SAAS,CAAEJ,MAAO,yIAI7B,OACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAAC+B,EAAA,EAAKC,SAAN,CACEX,MAAOhC,KAAK+B,MAAMC,MAClBY,SAAU5C,KAAKiC,aACfY,YAAY,UAEdpC,EAAAC,EAAAC,cAAC+B,EAAA,EAAKpB,OAAN,CAAaE,QAASxB,KAAKkC,cAA3B,mBAnCaP,sBCwERmB,sBAnEb,SAAAA,EAAYlD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8C,IACjBjD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgD,GAAA3C,KAAAH,KAAMJ,KACDmC,MAAQ,CACXgB,KAAM,IAERlD,EAAKmD,YAAcnD,EAAKmD,YAAY3C,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACnBA,EAAKmD,cAELnD,EAAKoD,UAAYpD,EAAKoD,UAAU5C,KAAfP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KARAA,2MAYE0C,IAAMW,IAAIT,+DAAzBU,kBACEnD,KAAKoC,SAAS,CAAEW,KAAMI,EAAOJ,mLAGrBvC,mFACR+B,IAAMC,KAAKC,8CAA2B,CAAEjC,GAAIA,WAClDR,KAAKgD,kJAGE,IAAAI,EAAApD,KACP,OACES,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAAMC,QAAQ,MAAMC,UAAQ,GAC1B9C,EAAAC,EAAAC,cAAC0C,EAAA,EAAKG,IAAN,KACE/C,EAAAC,EAAAC,cAAC0C,EAAA,EAAKI,OAAN,CAAaC,MAAO,KAGtBjD,EAAAC,EAAAC,cAAC0C,EAAA,EAAKG,IAAN,KACE/C,EAAAC,EAAAC,cAAC0C,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAClBjD,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACkB,EAAD,CAASA,QAAS7B,KAAKgD,iBAK5BhD,KAAK+B,MAAMgB,KAAKY,IAAI,SAAAC,GAAC,OACpBnD,EAAAC,EAAAC,cAAC0C,EAAA,EAAKG,IAAN,CAAUK,IAAKD,EAAEpD,IACfC,EAAAC,EAAAC,cAAC0C,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAClBjD,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACmD,EAAD,CACED,IAAKD,EAAEpD,GACPA,GAAIoD,EAAEpD,GACNY,KAAMwC,EAAExC,KACRF,SAAU0C,EAAE1C,SACZQ,MAAOkC,EAAElC,MACTnB,OAAQ6C,EAAKH,iBAOvBxC,EAAAC,EAAAC,cAAC0C,EAAA,EAAKG,IAAN,KACE/C,EAAAC,EAAAC,cAAC0C,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAClBjD,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACoD,EAAD,CAAUlC,QAAS7B,KAAKgD,0BA1DtBrB,cCCEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ee483c5d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Card } from \"semantic-ui-react\";\n\nclass Post extends Component {\n  constructor(props) {\n    super(props);\n    this.increaseStateNumber = this.increaseStateNumber.bind(this);\n  }\n\n  increaseStateNumber() {\n    this.props.onLike(this.props.id);\n  }\n\n  render() {\n    return (\n      <div>\n        <Card fluid>\n          <Card.Content>\n            <div align=\"right\">\n              <Card.Meta content={this.props.polarity} />\n            </div>\n            <Card.Description content={this.props.text} />\n          </Card.Content>\n          <Card.Content extra>\n            <div align=\"right\">\n              <Button compact onClick={this.increaseStateNumber}>\n                <i className=\"heart icon\" />\n                {this.props.likes}\n              </Button>\n            </div>\n          </Card.Content>\n        </Card>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React, { Component } from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nclass Refresh extends Component {\n  render() {\n    return(\n      <div>\n        <Button fluid onClick={this.props.refresh}>\n          Refresh\n          <i className=\"refresh icon\"/>\n        </Button>\n      </div>\n    )\n  }\n}\n\nexport default Refresh;\n","import React, { Component } from \"react\";\nimport { Form } from \"semantic-ui-react\";\nimport axios from \"axios\";\n\n// const BACKEND_SERVER = \"http://0.0.0.0:4000\";\nconst BACKEND_SERVER = \"https://ventbox-backend.herokuapp.com\";\n\nclass InputBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n\n    if (this.state.value === \"\") {\n      return;\n    }\n\n    await axios.post(BACKEND_SERVER + \"/vent\", { text: this.state.value });\n    this.props.refresh();\n    await this.setState({ value: \"\" });\n  }\n\n  render() {\n    return (\n      <div>\n        <Form>\n          <Form.TextArea\n            value={this.state.value}\n            onChange={this.handleChange}\n            placeholder=\"Vent!\"\n          />\n          <Form.Button onClick={this.handleSubmit}>Submit</Form.Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default InputBox;\n","import React, { Component } from \"react\";\nimport Post from \"./components/Post.jsx\";\nimport Refresh from \"./components/refresh.jsx\";\nimport InputBox from \"./components/InputBox.jsx\";\nimport axios from \"axios\";\nimport { Grid } from \"semantic-ui-react\";\nimport \"./assets/postl.css\";\n\n// const BACKEND_SERVER = \"http://0.0.0.0:4000\";\nconst BACKEND_SERVER = \"https://ventbox-backend.herokuapp.com\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n    this.callRefresh = this.callRefresh.bind(this);\n    this.callRefresh();\n\n    this.postLiked = this.postLiked.bind(this);\n  }\n\n  async callRefresh() {\n    let result = await axios.get(BACKEND_SERVER + \"/refresh\");\n    await this.setState({ data: result.data });\n  }\n\n  async postLiked(id) {\n    await axios.post(BACKEND_SERVER + \"/likes\", { id: id });\n    this.callRefresh();\n  }\n\n  render() {\n    return (\n      <div>\n        <Grid columns=\"one\" centered>\n          <Grid.Row>\n            <Grid.Column width={4} />\n          </Grid.Row>\n\n          <Grid.Row>\n            <Grid.Column width={4}>\n              <center>\n                <Refresh refresh={this.callRefresh} />\n              </center>\n            </Grid.Column>\n          </Grid.Row>\n\n          {this.state.data.map(d => (\n            <Grid.Row key={d.id}>\n              <Grid.Column width={4}>\n                <center>\n                  <Post\n                    key={d.id}\n                    id={d.id}\n                    text={d.text}\n                    polarity={d.polarity}\n                    likes={d.likes}\n                    onLike={this.postLiked}\n                  />\n                </center>\n              </Grid.Column>\n            </Grid.Row>\n          ))}\n\n          <Grid.Row>\n            <Grid.Column width={4}>\n              <center>\n                <InputBox refresh={this.callRefresh} />\n              </center>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}